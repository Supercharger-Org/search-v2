// API Configuration
const APIConfig = {
    baseURLs: {
        production: {
            patents: 'https://production-patent-api.com',
            tto: 'https://production-tto-api.com'
        },
        staging: {
            patents: 'https://staging-patent-api.com',
            tto: 'https://staging-tto-api.com'
        }
    },

    getEnvironment() {
        return window.location.href.includes('.webflow.io') ? 'staging' : 'production';
    },

    getBaseURL(library) {
        const env = this.getEnvironment();
        return this.baseURLs[env][library];
    },

    endpoints: {
        patents: {
            search: '/api/patent/search'
        },
        tto: {
            search: '/api/tto/search'
        }
    },

    getFullURL(library, endpoint) {
        const baseURL = this.getBaseURL(library);
        const endpointPath = this.endpoints[library][endpoint];
        return `${baseURL}${endpointPath}`;
    }
};

// Step Configuration
const StepConfig = {
    library: {
        options: {
            patents: {
                visibility: {
                    '#patentSpecificFields': true,
                    '#ttoSpecificFields': false,
                    '#patentDescription': true,
                    '#patentMethodOption': true,
                },
                text: {
                    '[data-content="search-title"]': 'Patent Search',
                    '[data-content="search-description"]': 'Search through patent databases',
                    '[data-content="library-type"]': 'Patent Database'
                }
            },
            tto: {
                visibility: {
                    '#patentSpecificFields': false,
                    '#ttoSpecificFields': true,
                    '#patentDescription': false,
                    '#patentMethodOption': false,
                },
                text: {
                    '[data-content="search-title"]': 'TTO Search',
                    '[data-content="search-description"]': 'Search through TTO database',
                    '[data-content="library-type"]': 'TTO Database'
                }
            }
        }
    },
    method: {
        options: {
            basic: {
                visibility: {
                    '#advancedOptions': false,
                    '#basicOptions': true,
                    '#patentOptions': false,
                    '#keywordBasic': true,
                    '#keywordAdvanced': false
                },
                text: {
                    '[data-content="method-title"]': 'Basic Search',
                    '[data-content="method-description"]': 'Simple search with basic filters'
                }
            },
            advanced: {
                visibility: {
                    '#advancedOptions': true,
                    '#basicOptions': false,
                    '#patentOptions': false,
                    '#keywordBasic': false,
                    '#keywordAdvanced': true
                },
                text: {
                    '[data-content="method-title"]': 'Advanced Search',
                    '[data-content="method-description"]': 'Complex search with advanced filters'
                }
            },
            patent: {
                requires: {
                    library: ['patents'] // Only available when library is patents
                },
                visibility: {
                    '#advancedOptions': true,
                    '#basicOptions': false,
                    '#patentOptions': true,
                    '#keywordBasic': false,
                    '#keywordAdvanced': true
                },
                text: {
                    '[data-content="method-title"]': 'Patent Search',
                    '[data-content="method-description"]': 'Specialized patent search options'
                }
            }
        }
    }
};

class StepManager {
    constructor() {
        this.state = {
            library: null,
            method: null
        };
    }

    init() {
        this.setupLibraryListeners();
        this.setupMethodListeners();
    }

    setupLibraryListeners() {
        document.querySelectorAll('[data-library-option]').forEach(element => {
            element.addEventListener('click', (e) => {
                const option = e.target.dataset.libraryOption;
                this.setLibrary(option);
            });
        });
    }

    setupMethodListeners() {
        document.querySelectorAll('[data-method-option]').forEach(element => {
            element.addEventListener('click', (e) => {
                const option = e.target.dataset.methodOption;
                this.setMethod(option);
            });
        });
    }

    setLibrary(library) {
        // Update state
        this.state.library = library;

        // Update UI
        this.updateLibraryUI();
        
        // If current method is not valid for new library, reset it
        if (this.state.method) {
            const methodConfig = StepConfig.method.options[this.state.method];
            if (methodConfig.requires && 
                methodConfig.requires.library && 
                !methodConfig.requires.library.includes(library)) {
                this.setMethod(null);
            }
        }

        // Apply library-specific changes
        const config = StepConfig.library.options[library];
        if (config) {
            this.applyVisibilityRules(config.visibility);
            this.applyTextRules(config.text);
        }

        this.emitStateChange();
    }

    setMethod(method) {
        // Validate method is allowed for current library
        if (method) {
            const methodConfig = StepConfig.method.options[method];
            if (methodConfig.requires && 
                methodConfig.requires.library && 
                !methodConfig.requires.library.includes(this.state.library)) {
                console.warn('Invalid method for current library');
                return;
            }
        }

        // Update state
        this.state.method = method;

        // Update UI
        this.updateMethodUI();

        // Apply method-specific changes
        if (method) {
            const config = StepConfig.method.options[method];
            this.applyVisibilityRules(config.visibility);
            this.applyTextRules(config.text);
        }

        this.emitStateChange();
    }

    updateLibraryUI() {
        // Remove active class from all library options
        document.querySelectorAll('[data-library-option]').forEach(element => {
            element.classList.remove('active');
        });

        // Add active class to selected library
        if (this.state.library) {
            const element = document.querySelector(
                `[data-library-option="${this.state.library}"]`
            );
            if (element) element.classList.add('active');
        }
    }

    updateMethodUI() {
        // Remove active class from all method options
        document.querySelectorAll('[data-method-option]').forEach(element => {
            element.classList.remove('active');
        });

        // Add active class to selected method
        if (this.state.method) {
            const element = document.querySelector(
                `[data-method-option="${this.state.method}"]`
            );
            if (element) element.classList.add('active');
        }
    }

    applyVisibilityRules(rules) {
        Object.entries(rules).forEach(([selector, shouldShow]) => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
                element.classList.toggle('hidden', !shouldShow);
            });
        });
    }

    applyTextRules(rules) {
        Object.entries(rules).forEach(([selector, text]) => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
                element.textContent = text;
            });
        });
    }

    emitStateChange() {
        document.dispatchEvent(new CustomEvent('step:stateChanged', {
            detail: {
                state: this.getState(),
                apiURL: this.getAPIURL('search')
            }
        }));
    }

    getState() {
        return { ...this.state };
    }

    getAPIURL(endpoint) {
        if (!this.state.library) return null;
        return APIConfig.getFullURL(this.state.library, endpoint);
    }
}

// Usage
const stepManager = new StepManager();
stepManager.init();

// Listen for state changes
document.addEventListener('step:stateChanged', (event) => {
    const { state, apiURL } = event.detail;
    console.log('Current state:', state);
    console.log('API URL:', apiURL);
});
